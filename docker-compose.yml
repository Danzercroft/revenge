services:
  # Nginx веб-сервер
  nginx:
    image: nginx:alpine
    container_name: revenge_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites/:/etc/nginx/sites-available/
      - ./docker/nginx/sites/:/etc/nginx/sites-enabled/
      - ./storage/logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - revenge_network

  # Laravel приложение
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: revenge_app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./storage/logs/app:/var/www/html/storage/logs
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=revenge
      - DB_USERNAME=revenge_user
      - DB_PASSWORD=revenge_password
      - CACHE_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - SESSION_DRIVER=redis
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis_password
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - redis
    networks:
      - revenge_network

  # PostgreSQL база данных
  postgres:
    image: postgres:16-alpine
    container_name: revenge_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: revenge
      POSTGRES_USER: revenge_user
      POSTGRES_PASSWORD: revenge_password
      POSTGRES_ROOT_PASSWORD: revenge_root_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - revenge_network

  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    container_name: revenge_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - revenge_network

  # Queue Worker для обработки фоновых задач
  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: revenge_queue
    restart: unless-stopped
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
    environment:
      - APP_ENV=production
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=revenge
      - DB_USERNAME=revenge_user
      - DB_PASSWORD=revenge_password
      - REDIS_HOST=redis
      - REDIS_PASSWORD=redis_password
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
    depends_on:
      - postgres
      - redis
    networks:
      - revenge_network

  # Scheduler для Laravel cron задач
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: revenge_scheduler
    restart: unless-stopped
    command: sh -c "while true; do php artisan schedule:run; sleep 60; done"
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
    environment:
      - APP_ENV=production
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=revenge
      - DB_USERNAME=revenge_user
      - DB_PASSWORD=revenge_password
    depends_on:
      - postgres
      - redis
    networks:
      - revenge_network

# Тома для постоянного хранения данных
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Сеть для связи между контейнерами
networks:
  revenge_network:
    driver: bridge
